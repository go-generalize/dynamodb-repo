{{- $tableName := .TableName }}
// THIS FILE IS A GENERATED CODE. DO NOT EDIT
// generated version: {{ .AppVersion }}
package {{ .PackageName }}

import (
	"context"
	"reflect"
	"time"
{{- range .ImportList }}
	"{{ .Name }}"
{{- end }}
{{ if eq .EnableDDA true }}
	dda "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
{{- end }}
{{- if eq .AutoGeneration true }}
	"github.com/google/uuid"
{{- end }}
	"github.com/guregu/dynamo"
	"golang.org/x/xerrors"
)
{{ $generate := "go:generate" }}
//{{ $generate }} mockgen -source {{ .GeneratedFileName }}.go -destination mock/mock_{{ .GeneratedFileName }}/mock_{{ .GeneratedFileName }}.go

// {{ .RepositoryInterfaceName }} Repository of {{ .StructName }}
type {{ .RepositoryInterfaceName }} interface {
	// Single
	Get(ctx context.Context, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... GetOption) (*{{ .StructName }}, error)
	Insert(ctx context.Context, subject *{{ .StructName }}) error
	Update(ctx context.Context, subject *{{ .StructName }}) error
	ForceUpdate(ctx context.Context, subject *{{ .StructName }}) error
	Delete(ctx context.Context, subject *{{ .StructName }}, options... DeleteOption) error
	DeleteBy{{ FuncNameByValue }}(ctx context.Context, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... DeleteOption) error
	// Multiple
	GetMulti(ctx context.Context, {{ RangeKeyArgCheckPairs }}, options... GetOption) ([]*{{ .StructName }}, error)
	InsertMulti(ctx context.Context, subjects []*{{ .StructName }}) error
	UpdateMulti(ctx context.Context, subjects []*{{ .StructName }}) error
	DeleteMulti(ctx context.Context, subjects []*{{ .StructName }}, options... DeleteOption) error
	DeleteMultiBy{{ PluralForm FuncNameByValue }}(ctx context.Context, {{ RangeKeyArgCheckPairs }}, options... DeleteOption) error
	// Query
	List(name string, value interface{}) *dynamo.Query
	Scan() *dynamo.Scan
	// Transaction
	RunInTransaction(ctx context.Context, fn func(tx *dynamo.WriteTx) error) error
	GetWithTx(tx *dynamo.GetTx, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... GetOption) (*{{ .StructName }}, error)
	InsertWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error
	UpdateWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error
	ForceUpdateWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error
	DeleteWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}, options... DeleteOption) error
	DeleteBy{{ FuncNameByValue }}WithTx(ctx context.Context, tx *dynamo.WriteTx, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... DeleteOption) error
	// misc
	GetTable() dynamo.Table
	GetTableName() string
}

{{- $middlewareName := printf "%sMiddleware" .RepositoryInterfaceName }}
// {{ $middlewareName }} middleware of {{ .RepositoryInterfaceName }}
type {{ $middlewareName }} interface {
	BeforeInsert(ctx context.Context, subject *{{ .StructName }}) (bool, error)
	BeforeUpdate(ctx context.Context, subject *{{ .StructName }}) (bool, error)
	BeforeDelete(ctx context.Context, subject *{{ .StructName }}, options... DeleteOption) (bool, error)
}

type {{ .RepositoryStructName }} struct {
	db         *dynamo.DB
	table      dynamo.Table
	middleware []{{ $middlewareName }}
}
{{ if .UniqueFields }}
{{- range $uniqueField := .UniqueFields }}
type {{ $uniqueField.StructName }} struct {
	{{ $uniqueField.Name }} {{ $uniqueField.Type }} `dynamo:",hash"`
}
{{ end }}
// Create{{ .StructName }}DepsTable Create a dependency table for {{ .TableName }}
func Create{{ .StructName }}DepsTable(ctx context.Context, db *dynamo.DB) error {
    structs := map[string]interface{}{
{{- range $uniqueField := .UniqueFields }}
        "{{ $uniqueField.StructName }}": new({{ $uniqueField.StructName }}),
{{- end }}
    }

    for name, s := range structs {
    	_, err := db.Table(name).Describe().RunWithContext(ctx)
    	if err != nil && xerrors.Is(err, dynamo.ErrNotFound) {
            return err
        }

        createTable := db.CreateTable(name, s)
        if err := createTable.RunWithContext(ctx); err != nil {
            return xerrors.Errorf("failed to Create{{ .StructName }}DepsTable by {{ .RepositoryInterfaceName }} err: %w", err)
        }
	}

	return nil
}
{{ end }}
// New{{ .RepositoryInterfaceName }} constructor
func New{{ .RepositoryInterfaceName }}(db *dynamo.DB, middleware... {{ $middlewareName }}) {{ .RepositoryInterfaceName }} {
	return &{{ .RepositoryStructName }}{
		db:         db,
		table:      db.Table("{{ .TableName }}"),
		middleware: middleware,
	}
}

// GetTable dynamo.Table getter
func (repo *{{ .RepositoryStructName }}) GetTable() dynamo.Table {
	return repo.table
}

// GetTableName TableName getter
func (repo *{{ .RepositoryStructName }}) GetTableName() string {
	return repo.table.Name()
}

// HasArg HasKeyのペアを返す
func (repo *{{ .RepositoryStructName }}) hashPair(subject *{{ .StructName }}) (string, interface{}) {
	return "{{ .HashKeyFieldTagName }}", subject.{{ .HashKeyFieldName }}
}
{{ if .MetaFields }}
// setMeta メタデータを設定する(Insert以外ではCreatedAtを設定しない)
func (repo *{{ .RepositoryStructName }}) setMeta(subject *{{ .StructName }}, isInsert bool) {
	now := time.Now()

	if isInsert {
		subject.{{ GetMetaKeyWithPath .MetaFields "CreatedAt" }} = now
	}
	subject.{{ GetMetaKeyWithPath .MetaFields "UpdatedAt" }} = now
	subject.{{ GetMetaKeyWithPath .MetaFields "Version" }} += 1
}
{{ end }}

// getNowPointer 現在のTime.timeポインターを返す
func (repo *{{ .RepositoryStructName }}) getNowPointer() *time.Time {
	t := time.Now()
	return &t
}

// List ハッシュキーやGSIを利用した検索を行う
// GSIを利用した場合、ListにはGSIが適用されている属性の名前と値を指定し、必ずIndexでインデックス名を指定する必要がある
func (repo *{{ .RepositoryStructName }}) List(name string, value interface{}) *dynamo.Query {
	return repo.table.Get(name, value)
}

// Scan 検索ができない時テーブル全体もしくはGSI全体に対して検索をかける
// パフォーマンスやコストの観点から可能な限りListを使用する方が望ましい
func (repo *{{ .RepositoryStructName }}) Scan() *dynamo.Scan {
	return repo.table.Scan()
}
{{ if .UniqueFields }}
// validateUnique unique check
func (repo *lockRepository) validateUnique(ctx context.Context, subject *{{ .StructName }}) error {
{{- range $uniqueField := .UniqueFields }}
    var {{ $uniqueField.SubjectName }} *{{ $uniqueField.StructName }} = nil
    {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
    if err := {{ printf "%sTable" $uniqueField.VarName }}.Get("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }}).OneWithContext(ctx, {{ $uniqueField.SubjectName }});
        err != nil && !xerrors.Is(err, dynamo.ErrNotFound) {
        return xerrors.Errorf("validateUnique.Get error: %w", err)
    }
    if {{ $uniqueField.SubjectName }} != nil {
        return xerrors.New("{{ $uniqueField.Name }} has to be unique, but it already exists.")
    }
{{ end }}
    return nil
}
{{ end }}
// Get 処理中の {{ .StructName }} の取得処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) Get(ctx context.Context, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... GetOption) (*{{ .StructName }}, error) {
	subject := new({{ .StructName }})

	q := repo.table.Get("{{ .HashKeyFieldTagName }}", {{ .HashKeyValueName }}){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", dynamo.Equal, {{ .RangeKeyValueName }}){{ end }}
	if err := q.OneWithContext(ctx, &subject); err != nil {
		return nil, xerrors.Errorf("error in Get method: %w", err)
	}
{{- if .MetaFields }}
	if len(options) == 0 || !options[0].IncludeSoftDeleted {
		if subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} != nil {
			return nil, dynamo.ErrNotFound
		}
	}
{{ end }}
	return subject, nil
}

// GetWithTx トランザクション中の {{ .StructName }} の取得処理を行う
func (repo *{{ .RepositoryStructName }}) GetWithTx(tx *dynamo.GetTx, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... GetOption) (*{{ .StructName }}, error) {
	subject := new({{ .StructName }})

	query := repo.table.Get("{{ .HashKeyFieldTagName }}", {{ .HashKeyValueName }}){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", dynamo.Equal, {{ .RangeKeyValueName }}){{ end }}
	tx.GetOne(query, &subject)
	if err := tx.Run(); err != nil {
		return nil, xerrors.Errorf("error in Run method: %w", err)
	}
{{- if .MetaFields }}
	if len(options) == 0 || !options[0].IncludeSoftDeleted {
		if subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} != nil {
			return nil, dynamo.ErrNotFound
		}
	}
{{ end }}
	return subject, nil
}

// RunInTransaction - トランザクション中で処理を行う
func (repo *{{ .RepositoryStructName }}) RunInTransaction(ctx context.Context, fn func(tx *dynamo.WriteTx) error) error {
	tx := repo.db.WriteTx()
	tx.Idempotent(true)
	if err := fn(tx); err != nil {
		return xerrors.Errorf("error in func1 method: %w", err)
	}
	if err := tx.RunWithContext(ctx); err != nil {
		return xerrors.Errorf("error in RunWithContext method: %w", err)
	}
	return nil
}

func (repo *{{ .RepositoryStructName }}) insertQuery(subject *{{ .StructName }}) *dynamo.Put {
{{- if eq .EnableCreateTime true }}
	subject.{{ .CreateTimeName }} = {{ Now .CreateTimeType }}
{{- end }}
{{- if eq .EnableUpdateTime true }}
	subject.{{ .UpdateTimeName }} = {{ Now .UpdateTimeType }}
{{- end }}
	query := repo.table.Put(subject)
	return query.If("attribute_not_exists($)", "{{ .HashKeyFieldTagName }}")
}
func (repo *{{ .RepositoryStructName }}) beforeInsert(ctx context.Context, subject *{{ .StructName }}) error {
{{- if .MetaFields }}
	if subject.{{ GetMetaKeyWithPath .MetaFields "Version" }} != 0 {
		return xerrors.Errorf("insert data must be {{ GetMetaKeyWithPath .MetaFields "Version" }} == 0: %+v", subject)
	}
	repo.setMeta(subject, true)

{{- end }}
	for _, m := range repo.middleware {
		c, err := m.BeforeInsert(ctx, subject)
		if err != nil {
			return xerrors.Errorf("beforeInsert.middleware error: %w", err)
		}
		if !c {
			continue
		}
	}

	return nil
}
// Insert 処理中の {{ .StructName }} の登録処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) Insert(ctx context.Context, subject *{{ .StructName }}) error {
{{- if eq .AutoGeneration true }}
	subject.{{ .HashKeyFieldName }} = {{ GenerationKey }}
{{- else }}
{{- if eq .HashKeyFieldType "string" }}
	if subject.{{ .HashKeyFieldName }} == "" {
{{- else }}
	if subject.{{ .HashKeyFieldName }} == 0 {
{{- end }}
		return xerrors.New("{{ .HashKeyFieldName }} is required")
	}
{{- end }}
{{- if $uniqueField := .UniqueFields }}
    if err := repo.validateUnique(ctx, subject); err != nil {
        return xerrors.Errorf("Insert.validateUnique error: %w", err)
    }
{{- end }}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
    {{ $uniqueField.SubjectName }} := new({{ $uniqueField.StructName }})
	{{ $uniqueField.SubjectName }}.{{ $uniqueField.Name }} = subject.{{ $uniqueField.Name }}
	if err := {{ printf "%sTable" $uniqueField.VarName }}.Put({{ $uniqueField.SubjectName }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("Insert.{{ printf "%sTable" $uniqueField.VarName }}.Put error: %w", err)
	}
{{ end }}
	if err := repo.beforeInsert(ctx, subject); err != nil {
		return xerrors.Errorf("Insert.beforeInsert error: %w", err)
	}

	return repo.insertQuery(subject).RunWithContext(ctx)
}

// InsertWithTx トランザクション中の {{ .StructName }} の登録処理を行う
func (repo *{{ .RepositoryStructName }}) InsertWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error {
{{- if eq .AutoGeneration true }}
	subject.{{ .HashKeyFieldName }} = {{ GenerationKey }}
{{- else }}
{{- if eq .HashKeyFieldType "string" }}
	if subject.{{ .HashKeyFieldName }} == "" {
{{- else }}
	if subject.{{ .HashKeyFieldName }} == 0 {
{{- end }}
		return xerrors.New("{{ .HashKeyFieldName }} is required")
	}
{{- end }}
{{- if $uniqueField := .UniqueFields }}
    if err := repo.validateUnique(ctx, subject); err != nil {
        return xerrors.Errorf("Insert.validateUnique error: %w", err)
    }
{{- end }}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
    {{ $uniqueField.SubjectName }} := new({{ $uniqueField.StructName }})
	{{ $uniqueField.SubjectName }}.{{ $uniqueField.Name }} = subject.{{ $uniqueField.Name }}
	if err := {{ printf "%sTable" $uniqueField.VarName }}.Put({{ $uniqueField.SubjectName }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("InsertWithTx.{{ printf "%sTable" $uniqueField.VarName }}.Put error: %w", err)
	}
{{ end }}
	if err := repo.beforeInsert(ctx, subject); err != nil {
		return xerrors.Errorf("InsertWithTx.beforeInsert error: %w", err)
	}

	tx.Put(repo.insertQuery(subject))
	return nil
}

func (repo *{{ .RepositoryStructName }}) updateQuery(ctx context.Context, old, subject *{{ .StructName }}) (*dynamo.Update, error) {
{{- if .MetaFields }}
	if subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} != nil {
	    return nil, xerrors.Errorf("Updating 'DeletedAt' in Update is prohibited.: %+v", subject)
	}

	if old.{{ GetMetaKeyWithPath .MetaFields "Version" }} > subject.{{ GetMetaKeyWithPath .MetaFields "Version" }} {
	    return nil, xerrors.Errorf("The data in the database is newer: (db {{ GetMetaKeyWithPath .MetaFields "Version" }}: %d, target {{ GetMetaKeyWithPath .MetaFields "Version" }}: %d) %+v",
	    old.{{ GetMetaKeyWithPath .MetaFields "Version" }}, subject.{{ GetMetaKeyWithPath .MetaFields "Version" }}, subject)
	}
	repo.setMeta(subject, false)
{{ end }}
	updated := map[string]interface{}{}
	{{- $created := .CreateTimeName }}
	{{- $updated := .UpdateTimeName }}
{{- range $i, $fi := .FieldInfos }}
{{- if and ( ne $fi.Field $created ) ( ne $fi.Field $updated )}}
	if !reflect.DeepEqual(old.{{$fi.Field}}, subject.{{$fi.Field}}) {
		updated["{{$fi.DynamoTag}}"] = subject.{{$fi.Field}}
	}

{{- end }}
{{- end }}
	if len(updated) == 0 {
		return nil, nil
	}
	query := repo.table.Update(repo.hashPair(subject)){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", subject.{{ .RangeKeyFieldName }}){{ end }}
	for path, v := range updated {
		query.Set(path, v)
	}

{{- if eq .EnableUpdateTime true }}
	query.Set("{{ .UpdateTimeDynamoTag }}", {{ Now .UpdateTimeType }})
{{- end }}

	for _, m := range repo.middleware {
		c, err := m.BeforeUpdate(ctx, subject)
		if err != nil {
			return nil, err
		}
		if !c {
			continue
		}
	}
	return query.If("attribute_exists($)", "{{ .HashKeyFieldTagName }}"), nil
}

// Update 処理中の {{ .StructName }} の更新処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) Update(ctx context.Context, subject *{{ .StructName }}) error {
	old, err := repo.Get(ctx, subject.{{ .HashKeyFieldName }}{{ if ne .RangeKeyFieldName "" }}, subject.{{ .RangeKeyFieldName }}{{ end }})
	if err != nil {
		return xerrors.Errorf("error in Get method: %w", err)
	}
{{- range $uniqueField := .UniqueFields }}
    if subject.{{ $uniqueField.Name }} != old.{{ $uniqueField.Name }} {
        {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
        if err := {{ printf "%sTable" $uniqueField.VarName }}.Delete("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }}).RunWithContext(ctx); err != nil {
        	return xerrors.Errorf("Update.{{ printf "%sTable" $uniqueField.VarName }}.Delete error: %w", err)
        }
        {{ $uniqueField.SubjectName }} := new({{ $uniqueField.StructName }})
        {{ $uniqueField.SubjectName }}.{{ $uniqueField.Name }} = subject.{{ $uniqueField.Name }}
        if err := {{ printf "%sTable" $uniqueField.VarName }}.Put({{ $uniqueField.SubjectName }}).RunWithContext(ctx); err != nil {
            return xerrors.Errorf("Update.{{ printf "%sTable" $uniqueField.VarName }}.Put error: %w", err)
        }
	}
{{ end }}
	query, err := repo.updateQuery(ctx, old, subject)
	if err != nil {
		return xerrors.Errorf("Update.updateQuery error: %w", err)
	}
	if query == nil {
		return ErrNoDifference
	}

	return query.RunWithContext(ctx)
}

// UpdateWithTx トランザクション中の {{ .StructName }} の更新処理を行う
func (repo *{{ .RepositoryStructName }}) UpdateWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error {
	getTx := repo.db.GetTx()
	old, err := repo.GetWithTx(getTx, subject.{{ .HashKeyFieldName }}{{ if ne .RangeKeyFieldName "" }}, subject.{{ .RangeKeyFieldName }}{{ end }})
	if err != nil {
		return xerrors.Errorf("error in GetWithTx method: %w", err)
	}
{{- range $uniqueField := .UniqueFields }}
    if subject.{{ $uniqueField.Name }} != old.{{ $uniqueField.Name }} {
        {{ printf "%s%sDeleteRequest" $tableName $uniqueField.Name }} := repo.db.Table("{{ $uniqueField.StructName }}").Delete("{{ $uniqueField.Name }}", old.{{ $uniqueField.Name }})
        tx.Delete({{ printf "%s%sDeleteRequest" $tableName $uniqueField.Name }})

        {{ $uniqueField.SubjectName }} := new({{ $uniqueField.StructName }})
        {{ $uniqueField.SubjectName }}.{{ $uniqueField.Name }} = subject.{{ $uniqueField.Name }}
        {{ printf "%s%sPutRequest" $tableName $uniqueField.Name }} := repo.db.Table("{{ $uniqueField.StructName }}").Put({{ $uniqueField.SubjectName }})
        tx.Put({{ printf "%s%sPutRequest" $tableName $uniqueField.Name }})
	}
{{ end }}
	query, err := repo.updateQuery(ctx, old, subject)
	if err != nil {
		return xerrors.Errorf("UpdateWithTx.updateQuery error: %w", err)
	}
	if query == nil {
		return ErrNoDifference
	}

	tx.Update(query)
	return nil
}

func (repo *{{ .RepositoryStructName }}) forceUpdateQuery(ctx context.Context, subject *{{ .StructName }}) (*dynamo.Update, error) {
	for _, m := range repo.middleware {
		c, err := m.BeforeUpdate(ctx, subject)
		if err != nil {
			return nil, err
		}
		if !c {
			continue
		}
	}

	return repo.table.Update(repo.hashPair(subject)){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", subject.{{ .RangeKeyFieldName }}){{ end }}.
{{- range $i, $fi := .FieldInfos }}
{{- if and ( ne $fi.Field $created ) ( ne $fi.Field $updated )}}
		Set("{{ $fi.DynamoTag }}", subject.{{ $fi.Field }}).
{{- end }}
{{- end }}
{{- if eq .EnableUpdateTime true }}
		Set("{{ .UpdateTimeDynamoTag }}", {{ Now .UpdateTimeType }}).
{{- end }}
		If("attribute_exists($)", "{{ .HashKeyFieldTagName }}"), nil
}

// ForceUpdate 処理中の Task の更新処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) ForceUpdate(ctx context.Context, subject *{{ .StructName }}) error {
	q, err := repo.forceUpdateQuery(ctx, subject)
	if err != nil {
		return xerrors.Errorf("ForceUpdate.forceUpdateQuery error: %w", err)
	}

	return q.RunWithContext(ctx)
}

// ForceUpdateWithTx トランザクション中の Task の更新クエリを発行する
func (repo *{{ .RepositoryStructName }}) ForceUpdateWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}) error {
	for _, m := range repo.middleware {
		c, err := m.BeforeUpdate(ctx, subject)
		if err != nil {
			return xerrors.Errorf("ForceUpdateWithTx.BeforeUpdate error: %w", err)
		}
		if !c {
			continue
		}
	}
	q, err := repo.forceUpdateQuery(ctx, subject)
	if err != nil {
		return xerrors.Errorf("ForceUpdateWithTx.forceUpdateQuery error: %w", err)
	}

	tx.Update(q)
	return nil
}

// Delete 処理中の {{ .StructName }} の削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) Delete(ctx context.Context, subject *{{ .StructName }}, options... DeleteOption) error {
	for _, m := range repo.middleware {
		c, err := m.BeforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("Delete.BeforeDelete error: %w", err)
		}
		if !c {
			continue
		}
	}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
	if err := {{ printf "%sTable" $uniqueField.VarName }}.Delete("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("Delete.{{ printf "%sTable" $uniqueField.VarName }}.Delete error: %w", err)
	}
{{ end }}
{{- if .MetaFields }}
	if len(options) > 0 && options[0].Mode == DeleteModeSoft {
		subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} = repo.getNowPointer()
		q, err := repo.forceUpdateQuery(ctx, subject)
		if err != nil {
			return xerrors.Errorf("Delete.forceUpdateQuery Error: %w", err)
		}
		return q.RunWithContext(ctx)
	}
{{ end  }}
	return repo.table.Delete(repo.hashPair(subject)){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", subject.{{ .RangeKeyFieldName }}){{ end }}.RunWithContext(ctx)
}

// DeleteBy{{ .HashKeyFieldName }} 処理中の {{ .StructName }} の{{ .HashKeyFieldName }}から削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) DeleteBy{{ FuncNameByValue }}(ctx context.Context, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... DeleteOption) error {
    subject, err := repo.Get(ctx, {{ .HashKeyValueName }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }}{{ end }})
    if err != nil {
        return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}.Get error: %w", err)
    }
	for _, m := range repo.middleware {
		c, err := m.BeforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("DeleteBy.BeforeDelete error: %w", err)
		}
		if !c {
			continue
		}
	}
{{- if .MetaFields }}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%sTable" $uniqueField.VarName }} := repo.db.Table("{{ $uniqueField.StructName }}")
	if err := {{ printf "%sTable" $uniqueField.VarName }}.Delete("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}.{{ printf "%sTable" $uniqueField.VarName }}.Delete error: %w", err)
	}
{{ end }}
	if len(options) > 0 && options[0].Mode == DeleteModeSoft {
		subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} = repo.getNowPointer()
		q, err := repo.forceUpdateQuery(ctx, subject)
		if err != nil {
			return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}.forceUpdateQuery Error: %w", err)
		}
		return q.RunWithContext(ctx)
	}
{{ end  }}
	return repo.table.Delete("{{ .HashKeyFieldTagName }}", {{ .HashKeyValueName }}){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", {{ .RangeKeyValueName }}){{ end }}.RunWithContext(ctx)
}

// DeleteWithTx トランザクション中の {{ .StructName }} の削除処理を行う
func (repo *{{ .RepositoryStructName }}) DeleteWithTx(ctx context.Context, tx *dynamo.WriteTx, subject *{{ .StructName }}, options... DeleteOption) error {
	for _, m := range repo.middleware {
		c, err := m.BeforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("DeleteWithTx.BeforeDelete error: %w", err)
		}
		if !c {
			continue
		}
	}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%s%sDeleteQuery" $tableName $uniqueField.Name }} := repo.db.Table("{{ $uniqueField.StructName }}").Delete("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }})
	if err := tx.Delete({{ printf "%s%sDeleteQuery" $tableName $uniqueField.Name }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}WithTx.Delete error: %w", err)
	}
{{ end }}
{{- if .MetaFields }}
	if len(options) > 0 && options[0].Mode == DeleteModeSoft {
		subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} = repo.getNowPointer()
		q, err := repo.forceUpdateQuery(ctx, subject)
		if err != nil {
			return xerrors.Errorf("DeleteWithTx.forceUpdateQuery Error: %w", err)
		}
		tx.Update(q)
		return nil
	}
{{ end }}
	tx.Delete(repo.table.Delete(repo.hashPair(subject)){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", subject.{{ .RangeKeyFieldName }}){{ end }})
	return nil
}

// DeleteBy{{ .HashKeyFieldName }}WithTx トランザクション中の {{ .StructName }} の{{ .HashKeyFieldName }}から削除処理を行う
func (repo *{{ .RepositoryStructName }}) DeleteBy{{ FuncNameByValue }}WithTx(ctx context.Context, tx *dynamo.WriteTx, {{ .HashKeyValueName }} {{ .HashKeyFieldType }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }} {{ .RangeKeyFieldType }}{{ end }}, options... DeleteOption) error {
    subject, err := repo.Get(ctx, {{ .HashKeyValueName }}{{ if ne .RangeKeyFieldName "" }}, {{ .RangeKeyValueName }}{{ end }})
    if err != nil {
        return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}WithTx.Get error: %w", err)
    }

	for _, m := range repo.middleware {
		c, err := m.BeforeDelete(ctx, subject, options...)
		if err != nil {
			return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}WithTx.BeforeDelete error: %w", err)
		}
		if !c {
			continue
		}
	}
{{- if .MetaFields }}
{{- range $uniqueField := .UniqueFields }}
    {{ printf "%s%sDeleteQuery" $tableName $uniqueField.Name }} := repo.db.Table("{{ $uniqueField.StructName }}").Delete("{{ $uniqueField.Name }}", subject.{{ $uniqueField.Name }})
	if err := tx.Delete({{ printf "%s%sDeleteQuery" $tableName $uniqueField.Name }}).RunWithContext(ctx); err != nil {
		return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}WithTx.Delete error: %w", err)
	}
{{ end }}
	if len(options) > 0 && options[0].Mode == DeleteModeSoft {
		subject.{{ GetMetaKeyWithPath .MetaFields "DeletedAt" }} = repo.getNowPointer()
		q, err := repo.forceUpdateQuery(ctx, subject)
		if err != nil {
			return xerrors.Errorf("DeleteBy{{ FuncNameByValue }}WithTx.forceUpdateQuery Error: %w", err)
		}
		tx.Update(q)
		return nil
	}
{{ end  }}
	tx.Delete(repo.table.Delete("{{ .HashKeyFieldTagName }}", {{ .HashKeyValueName }}){{ if ne .RangeKeyFieldName "" }}.Range("{{ .RangeKeyFieldTagName }}", {{ .RangeKeyValueName }}){{ end }})
	return nil
}

// GetMulti 処理中の {{ .StructName }} の一括取得処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) GetMulti(ctx context.Context, {{ RangeKeyArgCheckPairs }}, options... GetOption) (subjects []*{{ .StructName }}, err error) {
	for {{ RangeKeyForTerms }} {
		subject, err := repo.Get(ctx, {{ if ne .RangeKeyFieldName "" }}key, value{{ else }}{{ .HashKeyFieldTagName }}{{ end }}, options...)
		if err != nil {
			return nil, xerrors.Errorf("error in Get method: %w", err)
		}
		subjects = append(subjects, subject)
	}
	return
}

// InsertMulti 処理中の {{ .StructName }} の一括挿入処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) InsertMulti(ctx context.Context, subjects []*{{ .StructName }}) error {
	tx := repo.db.WriteTx()
	for _, subject := range subjects {
		if err := repo.InsertWithTx(ctx, tx, subject); err != nil {
			return xerrors.Errorf("error in InsertWithTx method: %w", err)
		}
	}
	return tx.RunWithContext(ctx)
}

// UpdateMulti 処理中の {{ .StructName }} の一括更新処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) UpdateMulti(ctx context.Context, subjects []*{{ .StructName }}) error {
	tx := repo.db.WriteTx()
	for _, subject := range subjects {
		err := repo.ForceUpdateWithTx(ctx, tx, subject)
		if err != nil {
			return xerrors.Errorf("UpdateMulti.ForceUpdateWithTx error: %w", err)
		}
	}
	return tx.RunWithContext(ctx)
}

// DeleteMulti 処理中の {{ .StructName }} の一括削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) DeleteMulti(ctx context.Context, subjects []*{{ .StructName }}, options... DeleteOption) error {
	tx := repo.db.WriteTx()
	for _, subject := range subjects {
		err := repo.DeleteWithTx(ctx, tx, subject, options...)
		if err != nil {
			return xerrors.Errorf("deleteMulti.DeleteWithTx error: %w", err)
		}
	}
	return tx.RunWithContext(ctx)
}

// DeleteMultiBy{{ PluralForm FuncNameByValue }} 処理中の {{ .StructName }} の{{ .HashKeyFieldName }}群を元に一括削除処理一切の責任を持ち、これを行う
func (repo *{{ .RepositoryStructName }}) DeleteMultiBy{{ PluralForm FuncNameByValue }}(ctx context.Context, {{ RangeKeyArgCheckPairs }}, options... DeleteOption) error {
	tx := repo.db.WriteTx()
	for {{ RangeKeyForTerms }} {
		err := repo.DeleteBy{{ FuncNameByValue }}WithTx(ctx , tx, {{ if ne .RangeKeyFieldName "" }}key, value{{ else }}{{ .HashKeyFieldTagName }}{{ end }}, options...)
		if err != nil {
			return xerrors.Errorf("DeleteMultiBy{{ PluralForm FuncNameByValue }}.DeleteBy{{ FuncNameByValue }}WithTx error: %w", err)
		}
	}
	return tx.RunWithContext(ctx)
}
